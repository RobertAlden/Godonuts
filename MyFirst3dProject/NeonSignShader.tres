[gd_resource type="VisualShader" load_steps=20 format=2]

[ext_resource path="res://NeonSignTexture.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeColorConstant" id=1]
output_port_for_preview = 0
constant = Color( 0.701961, 0.113725, 0.113725, 1 )

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorOp" id=3]

[sub_resource type="VisualShaderNodeVectorCompose" id=4]

[sub_resource type="VisualShaderNodeScalarOp" id=5]
default_input_values = [ 0, 0.0, 1, 0.05 ]
operator = 2

[sub_resource type="VisualShaderNodeColorOp" id=6]

[sub_resource type="VisualShaderNodeScalarUniform" id=7]
uniform_name = "HueOffset"

[sub_resource type="VisualShaderNodeTexture" id=8]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=9]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 0.5, 1 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorFunc" id=10]
function = 4

[sub_resource type="VisualShaderNodeVectorDecompose" id=11]

[sub_resource type="VisualShaderNodeScalarOp" id=12]

[sub_resource type="VisualShaderNodeVectorCompose" id=13]

[sub_resource type="VisualShaderNodeVectorFunc" id=14]
function = 5

[sub_resource type="VisualShaderNodeScalarUniform" id=15]
uniform_name = "TimeOffset"

[sub_resource type="VisualShaderNodeScalarOp" id=16]

[sub_resource type="VisualShaderNodeVectorScalarMix" id=17]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ), 2, 0.0 ]

[sub_resource type="VisualShaderNodeInput" id=18]
input_name = "uv"

[resource]
resource_local_to_scene = true
code = "shader_type spatial;
render_mode blend_add, cull_disabled, specular_schlick_ggx;

uniform float HueOffset;
uniform float TimeOffset;
uniform sampler2D tex_frg_2;



void vertex() {
// Output:0

}

void fragment() {
// ScalarUniform:19
	float n_out19p0 = HueOffset;

// Color:10
	vec3 n_out10p0 = vec3(0.701961, 0.113725, 0.113725);
	float n_out10p1 = 1.000000;

// VectorFunc:21
	vec3 n_out21p0;
	{
		vec3 c = n_out10p0;
		vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
		vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
		vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
		float d = q.x - min(q.w, q.y);
		float e = 1.0e-10;
		n_out21p0 = vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
	}

// VectorDecompose:22
	float n_out22p0 = n_out21p0.x;
	float n_out22p1 = n_out21p0.y;
	float n_out22p2 = n_out21p0.z;

// ScalarOp:23
	float n_out23p0 = n_out19p0 + n_out22p0;

// VectorCompose:24
	vec3 n_out24p0 = vec3(n_out23p0, n_out22p1, n_out22p2);

// VectorFunc:25
	vec3 n_out25p0;
	{
		vec3 c = n_out24p0;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		n_out25p0 = c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}

// ColorOp:17
	vec3 n_in17p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out17p0 = vec3(1.0) - (vec3(1.0) - n_out25p0) * (vec3(1.0) - n_in17p1);

// Input:8
	vec3 n_out8p0 = vec3(UV, 0.0);

// Input:11
	float n_out11p0 = TIME;

// ScalarUniform:26
	float n_out26p0 = TimeOffset;

// ScalarOp:27
	float n_out27p0 = n_out11p0 + n_out26p0;

// ScalarOp:15
	float n_in15p1 = 0.05000;
	float n_out15p0 = n_out27p0 * n_in15p1;

// VectorCompose:14
	float n_in14p0 = 0.00000;
	float n_in14p2 = 0.00000;
	vec3 n_out14p0 = vec3(n_in14p0, n_out15p0, n_in14p2);

// VectorOp:13
	vec3 n_out13p0 = n_out8p0 + n_out14p0;

// VectorOp:20
	vec3 n_in20p1 = vec3(1.00000, 0.50000, 1.00000);
	vec3 n_out20p0 = n_out13p0 * n_in20p1;

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out20p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// VectorScalarMix:32
	vec3 n_in32p1 = vec3(1.00000, 1.00000, 1.00000);
	float n_in32p2 = 0.00000;
	vec3 n_out32p0 = mix(n_out2p0, n_in32p1, n_in32p2);

// Output:0
	ALBEDO = n_out17p0;
	ALPHA = dot(n_out32p0, vec3(0.333333, 0.333333, 0.333333));
	EMISSION = n_out17p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1146.67, -91.3333 )
modes/blend = 1
modes/cull = 2
nodes/fragment/2/node = SubResource( 8 )
nodes/fragment/2/position = Vector2( -440, 240 )
nodes/fragment/8/node = SubResource( 18 )
nodes/fragment/8/position = Vector2( -1560, 400 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -1720, -60 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -1900, 620 )
nodes/fragment/13/node = SubResource( 3 )
nodes/fragment/13/position = Vector2( -1100, 360 )
nodes/fragment/14/node = SubResource( 4 )
nodes/fragment/14/position = Vector2( -1080, 640 )
nodes/fragment/15/node = SubResource( 5 )
nodes/fragment/15/position = Vector2( -1360, 640 )
nodes/fragment/17/node = SubResource( 6 )
nodes/fragment/17/position = Vector2( 60, -60 )
nodes/fragment/19/node = SubResource( 7 )
nodes/fragment/19/position = Vector2( -1420, -260 )
nodes/fragment/20/node = SubResource( 9 )
nodes/fragment/20/position = Vector2( -780, 380 )
nodes/fragment/21/node = SubResource( 10 )
nodes/fragment/21/position = Vector2( -1460, -60 )
nodes/fragment/22/node = SubResource( 11 )
nodes/fragment/22/position = Vector2( -1140, -40 )
nodes/fragment/23/node = SubResource( 12 )
nodes/fragment/23/position = Vector2( -920, -240 )
nodes/fragment/24/node = SubResource( 13 )
nodes/fragment/24/position = Vector2( -600, -40 )
nodes/fragment/25/node = SubResource( 14 )
nodes/fragment/25/position = Vector2( -320, -100 )
nodes/fragment/26/node = SubResource( 15 )
nodes/fragment/26/position = Vector2( -1900, 740 )
nodes/fragment/27/node = SubResource( 16 )
nodes/fragment/27/position = Vector2( -1620, 640 )
nodes/fragment/32/node = SubResource( 17 )
nodes/fragment/32/position = Vector2( -80, 560 )
nodes/fragment/connections = PoolIntArray( 8, 0, 13, 0, 14, 0, 13, 1, 15, 0, 14, 1, 17, 0, 0, 0, 17, 0, 0, 5, 13, 0, 20, 0, 20, 0, 2, 0, 10, 0, 21, 0, 21, 0, 22, 0, 19, 0, 23, 0, 22, 0, 23, 1, 22, 1, 24, 1, 22, 2, 24, 2, 23, 0, 24, 0, 24, 0, 25, 0, 25, 0, 17, 0, 11, 0, 27, 0, 26, 0, 27, 1, 27, 0, 15, 0, 2, 0, 32, 0, 32, 0, 0, 1 )
